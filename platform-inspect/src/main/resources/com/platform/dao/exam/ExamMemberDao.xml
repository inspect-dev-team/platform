<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.platform.dao.exam.ExamMemberDao">

    <resultMap type="com.platform.entity.exam.ExamMemberEntity" id="examMemberMap">
        <result property="id" column="id"/>
        <result property="examId" column="exam_id"/>
        <result property="memberId" column="member_id"/>
		<result property="answerNum" column="answer_num"/>
		<result property="score" column="score"/>
		<result property="dataStatus" column="data_status"/>
    </resultMap>

	<select id="queryObject" resultType="com.platform.entity.exam.ExamMemberEntity">
		select
			`id`,
    		`exam_id`,
		    `answer_num`,
			`score`,
    		`member_id`
		from exam_member
		where id = #{id}
	</select>

	<select id="queryExamMember" parameterType="com.platform.entity.exam.ExamMemberEntity"  resultType="com.platform.entity.exam.ExamMemberEntity">
		select
		`id`,
		`exam_id`,
		`answer_num`,
		`score`,
		`member_id`
		from exam_member
		WHERE 1 = 1
		<if test="id != null">
			AND id = #{id}
		</if>
		<if test="memberId != null">
			AND member_id = #{memberId}
		</if>
		<if test="examId != null">
			AND exam_id = #{examId}
		</if>
	</select>

	<select id="selectExamMembers" resultType="com.platform.entity.exam.ExamMemberEntity">
		SELECT
			m.id AS id,
			m.exam_id AS examId ,
			m.member_id  AS  memberId,
			m.answer_num AS  answerNum,
			m.score AS score,
			u.realname AS userName,
			u.mobile AS  mobile,
		    CONCAT_WS("/",e.question_num,m.answer_num) AS answerProcess
		FROM
			exam_member AS m
		LEFT JOIN app_user AS u ON m.member_id = u.id
		LEFT JOIN exam AS  e ON  m.exam_id = e.id
		WHERE 1=1 AND m.data_status = 0

		<if test="examId != null">
			AND m.exam_id = #{examId}
		</if>
		<choose>
			<when test="sidx != null and sidx.trim() != ''">
				order by ${sidx} ${order}
			</when>
			<otherwise>
				order by id
			</otherwise>
		</choose>
		<if test="offset != null and limit != null">
			limit #{offset}, #{limit}
		</if>

	</select>

	<select id="selectExamMembersTotal" resultType="int">
		SELECT
		   COUNT(*)
		FROM
		exam_member AS m
		LEFT JOIN app_user AS u ON m.member_id = u.id
		LEFT JOIN exam AS  e ON  m.exam_id = e.id
		WHERE 1=1 AND m.data_status = 0

		<if test="examId != null ">
			AND m.exam_id = #{examId}
		</if>
	</select>

	<select id="queryList" resultType="com.platform.entity.exam.ExamMemberEntity">
		select
    		`id`,
    		`exam_id`,
		    `answer_num`,
			`score`,
    		`member_id`
		from exam_member
		WHERE 1=1 AND  data_status = 0
		<if test="name != null and name.trim() != ''">
			AND name LIKE concat('%',#{name},'%')
		</if>
		<if test="examId != null ">
			AND exam_id = #{examId}
		</if>
        <choose>
            <when test="sidx != null and sidx.trim() != ''">
                order by ${sidx} ${order}
            </when>
			<otherwise>
                order by id desc
			</otherwise>
        </choose>
		<if test="offset != null and limit != null">
			limit #{offset}, #{limit}
		</if>
	</select>
	
 	<select id="queryTotal" resultType="int">
		select count(*) from exam_member
		WHERE 1=1
        <if test="name != null ">
            AND name LIKE concat('%',#{name},'%')
        </if>
		<if test="examId != null">
			AND exam_id = #{examId}
		</if>
	</select>
	 
	<insert id="save" parameterType="com.platform.entity.exam.ExamMemberEntity" useGeneratedKeys="true" keyProperty="id">
		insert into exam_member(
			`exam_id`,
			`answer_num`,
			`score`,
			data_status,
			`member_id`)
		values(
			#{examId},
			#{answerNum},
			#{score},
			#{dataStatus},
			#{memberId})
	</insert>
	 
	<update id="update" parameterType="com.platform.entity.exam.ExamMemberEntity">
		update exam_member 
		<set>
			<if test="examId != null">`exam_id` = #{examId}, </if>
			<if test="answerNum != null">`answer_num` = #{answerNum}, </if>
			<if test="score != null">`exam_id` = #{score}, </if>
			<if test="dataStatus != null">`data_status` = #{dataStatus}, </if>
			<if test="memberId != null">`member_id` = #{memberId}</if>
		</set>
		where 1=1
		<if test="id != null">
			AND id = #{id}
		</if>
		<if test="examId != null">
			AND exam_id = #{examId}
		</if>
		<if test="memberId != null">
			AND member_id = #{memberId}
		</if>
	</update>
	
	<delete id="delete">
		delete from exam_member where id = #{value}
	</delete>
	
	<delete id="deleteBatch">
		delete from exam_member where id in 
		<foreach item="id" collection="array" open="(" separator="," close=")">
			#{id}
		</foreach>
	</delete>

</mapper>